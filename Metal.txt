#include <SFML/Graphics.hpp>
#include <iostream>
#include <cmath>
using namespace sf;
using namespace std;

Vector2f Nomalize_vector(Vector2f v) {
    float magnitude = sqrt(pow(v.x,2)+pow(v.y+100,2));
    Vector2f normalized_vec;
    normalized_vec.x = v.x / magnitude;
    normalized_vec.y = v.y / magnitude;

    return normalized_vec;
}

class Main_Character {
public:
    Sprite Right_Inhale[8];
    Sprite Left_Inhale[8];
    Sprite Right_Drink[14];
    Sprite Left_Drink[14];
    Sprite Right_Movement[12];
    Sprite Left_Movement[12];
    Sprite Right_fire[4];
    Sprite Left_fire[4];


    Main_Character(Texture& Main_Character_Texture) {
        int Sprite_Mid = 308;
        int rect_X = 40;
        int rect_Y = 48;

        // Inhale Right
        for (int i = 0; i < 4; i++) {
            Right_Inhale[i].setTexture(Main_Character_Texture);
            Right_Inhale[i].setTextureRect(IntRect(Sprite_Mid + (i * 40), 20, rect_X, 40));
            Right_Inhale[i].setPosition(100, 700);
            Right_Inhale[i].setScale(Vector2f(5, 5));
        }
        for (int i = 0; i < 4; i++) {
            Right_Inhale[4 + i] = Right_Inhale[4 - i - 1];
        }

        // Inhale Left
        for (int i = 0; i < 4; i++) {
            Left_Inhale[i].setTexture(Main_Character_Texture);
            Left_Inhale[i].setTextureRect(IntRect(Sprite_Mid - ((i + 1) * rect_X), 20, rect_X, 40));
            Left_Inhale[i].setPosition(100, 700);
            Left_Inhale[i].setScale(Vector2f(5, 5));
        }
        for (int i = 0; i < 4; i++) {
            Left_Inhale[4 + i] = Left_Inhale[4 - i - 1];
        }

        // Drink Right
        for (int i = 0; i < 7; i++) {
            Right_Drink[i].setTexture(Main_Character_Texture);
            Right_Drink[i].setTextureRect(IntRect(307 + (i * 41), 65, rect_X, 48));
            //Right_Drink[i].setPosition(100, 775);
            Right_Drink[i].setScale(Vector2f(5, 5));
        }
        for (int i = 0; i < 7; i++) {
            Right_Drink[i + 7] = Right_Drink[7 - i - 1];
        }

        // Drink Left
        for (int i = 0; i < 7; i++) {
            Left_Drink[i].setTexture(Main_Character_Texture);
            Left_Drink[i].setTextureRect(IntRect(307 - ((i + 1) * 40), 65, rect_X, 48));
            //Left_Drink[i].setPosition(100, 775);
            Left_Drink[i].setScale(Vector2f(5, 5));
        }
        for (int i = 0; i < 7; i++) {
            Left_Drink[i + 7] = Left_Drink[7 - i - 1];
        }
        //Right Ahead-Movement
        for (int i = 0; i < 6; i++)
        {
            Right_Movement[i].setTexture(Main_Character_Texture);
            Right_Movement[i].setTextureRect(IntRect(309 + (i * 38), 1110, 38, 48));
            //Right_Movement[i].setPosition(100, 775);
            Right_Movement[i].setScale(Vector2f(5, 5));
        }
        for (int i = 0; i < 6; i++)
        {
            Right_Movement[i + 6].setTexture(Main_Character_Texture);
            Right_Movement[i + 6].setTextureRect(IntRect(308 + (i * 40), 1158, 40, 48));
            Right_Movement[i + 6].setScale(Vector2f(5, 5));
            //Right_Movement[i + 6].setPosition(100, 775);
        }
        //Left Movement
        for (int i = 0; i < 6; i++)
        {
            Left_Movement[i].setTexture(Main_Character_Texture);
            Left_Movement[i].setTextureRect(IntRect(308 - ((i+1) * 38), 1110, 38, 48));
           // Left_Movement[i].setPosition(100, 700);
            Left_Movement[i].setScale(Vector2f(5, 5));
        }
        for (int i = 0; i < 6; i++)
        {
            Left_Movement[i + 6].setTexture(Main_Character_Texture);
            Left_Movement[6 + i].setTextureRect(IntRect(306 - ((i + 1) * 40), 1158, 40, 48));
            Left_Movement[6 + i].setScale(Vector2f(5, 5));
        }

        //Right Fire Animation
        for (int i = 0; i < 4; i++)
        {
            Right_fire[i].setTexture(Main_Character_Texture);
            Right_fire[i].setTextureRect(IntRect(307 + (i * 54), 1480, 54, 48));
            Right_fire[i].setScale(Vector2f(5, 5));
        }
        for (int i = 0; i < 4; i++)
        {
            Left_fire[i].setTexture(Main_Character_Texture);
            Left_fire[i].setTextureRect(IntRect(309 - ((i+1) * 54), 1480, 54, 48));
            Left_fire[i].setScale(Vector2f(5, 5));
        }

    }
};

int main() {
    RenderWindow window(VideoMode(1920, 1080), "Main_Character");

    // Map Setup
    Texture Texture_Map;
    Texture_Map.loadFromFile("resources/level1.png");
    Sprite Map_Sprite(Texture_Map);
    float Map_X = static_cast<float>(window.getSize().x) / (Texture_Map.getSize().x);
    float Map_Y = static_cast<float>(window.getSize().y) / (Texture_Map.getSize().y);
    Map_Sprite.setScale(Map_X, Map_Y);

    // Main Character Texture
    Texture Main_Character_Texture;
    Main_Character_Texture.loadFromFile("resources/mainC.png");
    Sprite Sprite_Main_Character(Main_Character_Texture);
    Sprite_Main_Character.setScale(Vector2f(5, 5));
    Sprite_Main_Character.setPosition(100, 700);

    // Bullet Sprite & Works

    Texture bullet_texture;
    bullet_texture.loadFromFile("resources/bullet.png");
    Sprite bullet_sprite(bullet_texture);
    vector<Sprite> bullets;
    vector<Vector2f> bulletdirections;

    Main_Character M(Main_Character_Texture);

    // Animation control
    int inhale_frame = 0;
    bool Inhale_Direction = true; // true = right, false = left
    int drink_frame = 0;
    bool isDrinking = false;
    bool drinkDirectionRight = true;
    bool movement = false;
    bool movement_direction = true;
    int rightmovementframe = 0;
    bool isFiring = false;
    bool fire_direction = true;
    float firing_delay = 0.03f;
    int fire_frame = 0;
	
    Vector2f bullet_direction;
    Clock frameClock,ahead_clock;
    int flag = -1;
    float frame_delay = 0.10f;

    float Ahead_movement_delay = 0.09f;
    float movePerFrame = 25.0f; // Move by 15 pixels per frame

    Vector2f characterPosition = Sprite_Main_Character.getPosition();

    // Game loop
    while (window.isOpen()) {
        Event event;
        while (window.pollEvent(event)) {
            if (event.type == Event::Closed)
                window.close();

            // Direction key press
            if (event.type == Event::KeyPressed) {
                movement = true;
                if (event.key.code == Keyboard::Right || event.key.code == Keyboard::D) {
                    Inhale_Direction = true;
                    movement = true;
                    movement_direction = true;
                    fire_direction = true;
                }
                else if (event.key.code == Keyboard::Left || event.key.code == Keyboard::A) {
                    Inhale_Direction = false;
                    movement_direction = false;
                    fire_direction = false;
                }
                // Drink animation trigger
                else if (event.key.code == Keyboard::LControl || event.key.code == Keyboard::RControl) {
                    isDrinking = true;
                    drink_frame = 0;
                    drinkDirectionRight = Inhale_Direction;
                    movement = false;
                }
               
            }
            if (event.type == Event::MouseButtonPressed )
            {
                float cursorX = Mouse::getPosition(window).x;
                float charX = Sprite_Main_Character.getPosition().x;
                float distance = cursorX - charX;
                if (fire_direction && distance>300)
                {
                    bullets.push_back(bullet_sprite);
                    bullets[bullets.size() - 1].setPosition(Sprite_Main_Character.getPosition().x + 150, 850); // 850  // exiting position 
                    bullet_direction = Vector2f(Mouse::getPosition(window)) - Sprite_Main_Character.getPosition();
                    bullet_direction = Nomalize_vector(bullet_direction);
                    bulletdirections.push_back(bullet_direction);
                    flag = -1;
                    fire_frame = 0;
                    isFiring = true;
                    movement = false;
                    isDrinking = false;
                }
                else if (!fire_direction && distance<-300)
                {
                    bullets.push_back(bullet_sprite);
                    bullets[bullets.size() - 1].setPosition(Sprite_Main_Character.getPosition().x , 850);
                    bullet_direction = Vector2f(Mouse::getPosition(window)) - Sprite_Main_Character.getPosition();
                    bullet_direction = Nomalize_vector(bullet_direction);
                    bulletdirections.push_back(bullet_direction);
                    fire_frame = 0;
                    isFiring = true;
                    movement = false;
                    isDrinking = false;
                    flag = -1;
                }
           
                
            }
        }


    
        // Animate
       /* if (frameClock.getElapsedTime().asSeconds() > frame_delay*/
        
            if (frameClock.getElapsedTime().asSeconds() > frame_delay && isDrinking) {
                Sprite_Main_Character = (drinkDirectionRight) ? M.Right_Drink[drink_frame] : M.Left_Drink[drink_frame];
                characterPosition.y = 775;
                Sprite_Main_Character.setPosition(characterPosition);
                drink_frame++;

                if (drink_frame >= 14) {
                    isDrinking = false;
                    inhale_frame = 0;
                    movement = true;
                }
                frameClock.restart();
            }
            else if (movement && (Keyboard::isKeyPressed(Keyboard::Right) || Keyboard::isKeyPressed(Keyboard::Left)|| Keyboard::isKeyPressed(Keyboard::D) || Keyboard::isKeyPressed(Keyboard::A)))
            {
                if (ahead_clock.getElapsedTime().asSeconds() > Ahead_movement_delay)
                {
                    if (rightmovementframe < 2)
                    {
                        rightmovementframe = 2;
                    }

                    if (movement_direction) // Moving Right
                    {
                        Sprite_Main_Character = M.Right_Movement[rightmovementframe];
                        characterPosition.x += movePerFrame;
                    }
                    else // Moving Left
                    {
                        Sprite_Main_Character = M.Left_Movement[rightmovementframe];
                        characterPosition.x -= movePerFrame;
                    }

                    characterPosition.y = 775; // Keep the Y position consistent
                    Sprite_Main_Character.setPosition(characterPosition);

                    rightmovementframe = (rightmovementframe + 1) % 12;
                    ahead_clock.restart();
                }
            }
          
            else if (frameClock.getElapsedTime().asSeconds() > firing_delay && isFiring) {

                if (fire_direction)  // Right fire: cursor should be at least 100 units ahead
                {
                    flag = 1;
                    Sprite_Main_Character = M.Right_fire[fire_frame];
                    characterPosition.y = 785;
                    Sprite_Main_Character.setPosition(characterPosition);
                    fire_frame++;
                    if (fire_frame >= 4) {
                        fire_frame = 0;
                        isFiring = false;
                        inhale_frame = 0;
                       
                    }
                    frameClock.restart();
                }
                else if (!fire_direction )  // Left fire: cursor should be at least 100 units behind
                {
                    flag = 1;
                    Sprite_Main_Character = M.Left_fire[fire_frame];
                    characterPosition.y = 785;
                    Sprite_Main_Character.setPosition(characterPosition.x - 70, characterPosition.y);
                    fire_frame++;
                    if (fire_frame >= 4) {
                        fire_frame = 0;
                        isFiring = false;
                        inhale_frame = 0;
                        
                    }
                    frameClock.restart();
                }
            }

            else
            {
                if (frameClock.getElapsedTime().asSeconds() > frame_delay)
                {
                    Sprite_Main_Character = (Inhale_Direction) ? M.Right_Inhale[inhale_frame] : M.Left_Inhale[inhale_frame];
                    characterPosition.y = 800;
                    Sprite_Main_Character.setPosition(characterPosition);
                    inhale_frame = (inhale_frame + 1) % 8;
                    frameClock.restart();
                }
            }
            for (int i = 0; i < bullets.size(); i++)
            {
               
                bullets[i].setPosition(bullets[i].getPosition().x + bulletdirections[i].x, bullets[i].getPosition().y + bulletdirections[i].y);
            }
            // Get the bounding box of the sprite
            sf::FloatRect bounds = Sprite_Main_Character.getGlobalBounds(); // assuming your sprite is called bullet

            // Create a rectangle for visualizing the bounds
            sf::RectangleShape rect;
            rect.setSize(sf::Vector2f(bounds.width, bounds.height));
            rect.setPosition(bounds.left, bounds.top);
            rect.setFillColor(sf::Color::Transparent);
            rect.setOutlineColor(sf::Color::Red);
            rect.setOutlineThickness(1.0f);

            // Draw your sprite and then the rectangle (or reverse if you want the rect behind)
           
           

        // Draw
        window.clear();
        window.draw(Map_Sprite);
        for (int i = 0; i < bullets.size(); i++)
        {
            if (flag!= -1)
            {
            window.draw(bullets[i]);
            }
        }
        window.draw(Sprite_Main_Character);
        window.draw(rect);
        window.display();
        }
    return 0;
}
